# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `data_plane_api` gem.
# Please instead update this file by running `spoom srb sigs export`.

# Contains code which implements a subset of the
# HAProxy Data Plane API.
module DataPlaneApi
  class << self
    sig do
      params(
        block: T.proc.params(arg0: ::DataPlaneApi::Configuration).void
      ).returns(::DataPlaneApi::Configuration)
    end
    def configure(&block); end
  end
end

DataPlaneApi::CONFIG = T.let(T.unsafe(nil), DataPlaneApi::Configuration)

# Stores configuration options for the HAProxy Data Plane API.
class DataPlaneApi::Configuration
  sig do
    params(
      url: T.nilable(T.any(::String, ::URI::Generic)),
      global: T::Boolean,
      basic_user: T.nilable(::String),
      basic_password: T.nilable(::String),
      logger: T.nilable(::Logger),
      timeout: T.nilable(::Integer),
      parent: T.nilable(::DataPlaneApi::Configuration)
    ).void
  end
  def initialize(url: T.unsafe(nil), global: T.unsafe(nil), basic_user: T.unsafe(nil), basic_password: T.unsafe(nil), logger: T.unsafe(nil), timeout: T.unsafe(nil), parent: T.unsafe(nil)); end

  # Basic Auth password.
  sig { returns(T.nilable(::String)) }
  def basic_password; end

  # Basic Auth password.
  sig { params(basic_password: T.nilable(::String)).returns(T.nilable(::String)) }
  def basic_password=(basic_password); end

  # Basic Auth username.
  sig { returns(T.nilable(::String)) }
  def basic_user; end

  # Basic Auth username.
  sig { params(basic_user: T.nilable(::String)).returns(T.nilable(::String)) }
  def basic_user=(basic_user); end

  sig { returns(::Faraday::Connection) }
  def connection; end

  sig { void }
  def freeze; end

  # Whether this object is used as a global store of settings
  sig { returns(T::Boolean) }
  def global; end

  sig { returns(T.nilable(::Logger)) }
  def logger; end

  sig { params(logger: T.nilable(::Logger)).returns(T.nilable(::Logger)) }
  def logger=(logger); end

  sig { returns(T.nilable(::DataPlaneApi::Configuration)) }
  def parent; end

  sig { returns(T.nilable(::Integer)) }
  def timeout; end

  sig { params(timeout: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
  def timeout=(timeout); end

  sig { returns(T.nilable(T.any(::String, ::URI::Generic))) }
  def url; end

  sig { params(url: T.nilable(T.any(::String, ::URI::Generic))).returns(T.nilable(T.any(::String, ::URI::Generic))) }
  def url=(url); end

  private

  # Faraday 1.x compatibility
  sig { returns(::Faraday::Connection) }
  def build_connection; end
end

class DataPlaneApi::Error < ::StandardError; end

# Wraps endpoints regarding HAProxy servers.
module DataPlaneApi::Server
  class << self
    sig do
      params(
        backend: T.nilable(::String),
        name: T.nilable(::String),
        config: T.nilable(::DataPlaneApi::Configuration)
      ).returns(::Faraday::Response)
    end
    def get_runtime_settings(backend:, name: T.unsafe(nil), config: T.unsafe(nil)); end

    # @raise [::ArgumentError]
    sig do
      params(
        backend: T.nilable(::String),
        name: T.nilable(::String),
        settings: T::Hash[T.anything, T.anything],
        config: T.nilable(::DataPlaneApi::Configuration)
      ).returns(::Faraday::Response)
    end
    def update_transient_settings(backend:, name:, settings:, config: T.unsafe(nil)); end

    private

    sig { params(request: ::Faraday::Request, response: ::Faraday::Response, logger: T.nilable(::Logger)).void }
    def log_communication(request, response, logger:); end

    sig do
      params(
        method: ::Symbol,
        path: T.any(::Pathname, ::String),
        config: ::DataPlaneApi::Configuration,
        block: T.proc.params(arg0: ::Faraday::Request).void
      ).returns(::Faraday::Response)
    end
    def send_request(method:, path:, config:, &block); end
  end
end

DataPlaneApi::Server::ADMIN_STATES = T.let(T.unsafe(nil), Set)
DataPlaneApi::Server::OPERATIONAL_STATES = T.let(T.unsafe(nil), Set)
DataPlaneApi::VERSION = T.let(T.unsafe(nil), String)
